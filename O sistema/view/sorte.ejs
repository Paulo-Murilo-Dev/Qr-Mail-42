<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <link rel="icon" href="/img/ico.png" type="image/png">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mensagem da Sorte üçÄ</title>
  <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #FFC107;
      --secondary: #FFA000;
      --accent: #FF8F00;
      --light: #FFF8E1;
      --dark: #5D4037;
      --text: #3E2723;
      --paper: #FFECB3;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      background: linear-gradient(135deg, #FFFDE7 0%, #FFF9C4 100%);
      font-family: 'Source Sans Pro', sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      padding: 20px;
      color: var(--text);
      overflow-x: hidden;
      position: relative;
    }
    
    /* Splash Screen */
    .splash-screen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--primary);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      transition: opacity 0.5s ease;
    }
    
    .splash-screen h2 {
      font-size: 2rem;
      color: var(--dark);
      margin-bottom: 20px;
      text-align: center;
      padding: 0 20px;
    }
    
    .splash-screen p {
      font-size: 1.2rem;
      color: var(--dark);
      opacity: 0.8;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 0.8; transform: scale(1); }
      50% { opacity: 1; transform: scale(1.05); }
    }
    
    /* Emojis flutuantes no fundo */
    .floating-emoji {
      position: fixed;
      font-size: 32px;
      opacity: 0.1;
      z-index: -1;
      animation: float 8s infinite ease-in-out;
      pointer-events: none;
    }
    
    .floating-emoji:nth-child(1) { top: 15%; left: 10%; animation-delay: 0s; }
    .floating-emoji:nth-child(2) { top: 70%; right: 15%; animation-delay: 2s; }
    .floating-emoji:nth-child(3) { bottom: 20%; left: 20%; animation-delay: 4s; }
    .floating-emoji:nth-child(4) { top: 30%; right: 25%; animation-delay: 6s; }
    
    @keyframes float {
      0%, 100% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-25px) rotate(5deg); }
    }
    
    .container {
      background: var(--paper);
      border-radius: 20px;
      padding: 40px 30px;
      text-align: center;
      box-shadow: 0 15px 40px rgba(0,0,0,0.1);
      max-width: 650px;
      width: 100%;
      position: relative;
      overflow: hidden;
      border: 1px solid rgba(255, 193, 7, 0.3);
    }
    
    h1 {
      font-size: 2.2rem;
      color: var(--dark);
      margin-bottom: 20px;
      font-weight: 700;
    }
    
    .message-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    
    .present-box {
      width: 160px;
      height: 160px;
      background-image: url('/img/presente.png');
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      cursor: pointer;
      transition: transform 0.3s ease;
      position: relative;
    }
    
    .present-box.shake {
      animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
    }
    
    .shake-instruction {
      margin-top: 15px;
      font-size: 1rem;
      color: var(--dark);
      opacity: 0.7;
      font-weight: 600;
      transition: opacity 0.5s ease;
    }
    
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-8px); }
      20%, 40%, 60%, 80% { transform: translateX(8px); }
    }
    
    .present-box.open {
      animation: openPresent 1s forwards;
    }
    
    @keyframes openPresent {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.2); opacity: 1; }
      100% { transform: scale(0); opacity: 0; display: none; }
    }
    
    .frase-container {
      width: 100%;
      display: none;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transition: opacity 0.5s ease;
      margin-bottom: 5px;
    }
    
    .frase-container.show {
      display: flex;
      opacity: 1;
      animation: fadeInUp 0.8s ease forwards;
    }
    
    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    p.frase {
      font-size: 1.3rem;
      margin: 0;
      color: var(--text);
      line-height: 1.5;
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      font-weight: 400;
      width: 100%;
      border: 2px solid var(--primary);
    }
    
    .numbers-section {
      margin-top: 20px;
      opacity: 0;
      display: none;
    }
    
    .numbers-section.show {
      display: block;
      animation: fadeIn 0.8s 0.5s forwards;
    }
    
    .numbers-label {
      font-size: 1rem;
      color: var(--dark);
      margin-bottom: 10px;
      font-weight: 600;
    }
    
    .numeros {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 15px;
    }
    
    .numero {
      display: flex;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
      color: var(--dark);
      font-size: 1.1rem;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      font-weight: 700;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
      cursor: default;
      opacity: 0;
      transform: scale(0.5);
    }
    
    .numero-visible {
      animation: numberAppear 0.6s forwards;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @keyframes numberAppear {
      0% {
        opacity: 0;
        transform: scale(0.5);
      }
      70% {
        opacity: 1;
        transform: scale(1.1);
      }
      100% {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    .footer {
      margin-top: 30px;
      font-size: 0.9rem;
      color: var(--text);
      opacity: 0.8;
    }
    
    .footer a {
      color: var(--accent);
      text-decoration: none;
      font-weight: 600;
    }
    
    /* Confetti */
    .confetti {
      position: fixed;
      width: 12px;
      height: 12px;
      opacity: 0;
      z-index: 1000;
      pointer-events: none;
      animation: confettiFall 3s ease-in forwards;
      font-size: 18px;
    }
    
    @keyframes confettiFall {
      0% {
        transform: translateY(-100px) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translateY(calc(100vh + 100px)) rotate(360deg);
        opacity: 0;
      }
    }
    
    /* Responsividade */
    @media (max-width: 768px) {
      h1 {
        font-size: 2rem;
      }
      
      p.frase {
        font-size: 1.1rem;
        padding: 15px;
      }
      
      .present-box {
        width: 140px;
        height: 140px;
      }
    }
    
    @media (max-width: 480px) {
      .container {
        padding: 30px 20px;
      }
      
      h1 {
        font-size: 1.8rem;
      }
      
      p.frase {
        font-size: 1rem;
      }
      
      .present-box {
        width: 120px;
        height: 120px;
      }
      
      .shake-instruction {
        font-size: 0.9rem;
      }
    }
  </style>
</head>
<body>
  <!-- Emojis flutuantes no fundo -->
  <div class="floating-emoji">üçÄ</div>
  <div class="floating-emoji">üéÅ</div>
  <div class="floating-emoji">‚ú®</div>
  <div class="floating-emoji">üåü</div>
  <div class="floating-emoji">üåü</div>
  
  <!-- Splash Screen -->
  <div class="splash-screen" id="splashScreen">
    <h2>Curioso sobre sua sorte?</h2>
    <p>(toque para continuar)</p>
  </div>
  
  <div class="container" id="mainContainer" style="display: none;">
    <h1>Sorte do dia</h1>
    
    <div class="message-container">
      <div class="present-box" id="presentBox"></div>
      <p class="shake-instruction" id="shakeInstruction">Agite seu celular para abrir o presente!</p>
      <div class="frase-container" id="fraseContainer">
        <p class="frase"><%= frase %></p>
      </div>
    </div>
    
    <div class="numbers-section" id="numbersSection">
      <div class="numbers-label">N√∫meros da Sorte</div>
      <div class="numeros">
        <% numeros.slice(0, 5).forEach(function(num, index) { %>
          <span class="numero" style="animation-delay: <%= index * 0.1 %>s"><%= num %></span>
        <% }); %>
      </div>
    </div>
    
    <div class="footer">
      <p>Uma mensagem especial do <a href="https://qrmail42.wtf" target="_blank">QR Mail 42</a> üíå</p>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const splashScreen = document.getElementById('splashScreen');
      const mainContainer = document.getElementById('mainContainer');
      const presentBox = document.getElementById('presentBox');
      const fraseContainer = document.getElementById('fraseContainer');
      const numbersSection = document.getElementById('numbersSection');
      const shakeInstruction = document.getElementById('shakeInstruction');
      let isOpened = false;
      let deviceSupportsShake = false;
      
      // Mostrar splash screen inicialmente
      splashScreen.style.display = 'flex';
      mainContainer.style.display = 'none';
      
      // Fechar splash screen ao clicar
      splashScreen.addEventListener('click', function() {
        splashScreen.style.opacity = '0';
        
        // Testar suporte ao shake durante a anima√ß√£o de fade
        setTimeout(() => {
          testShakeSupport();
        }, 100);
        
        setTimeout(() => {
          splashScreen.style.display = 'none';
          mainContainer.style.display = 'block';
        }, 500);
      });
      
      
      // Fun√ß√£o para testar se o dispositivo suporta shake
      // Fun√ß√£o para testar se o dispositivo suporta shake
function testShakeSupport() {
  // Verifica se √© um dispositivo iOS (iPhone, iPad, iPod)
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) || 
               (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
  
  // Verifica se √© um dispositivo Android
  const isAndroid = /Android/.test(navigator.userAgent);
  
  // Dispositivos iOS n√£o suportam shake sem permiss√£o especial
  if (isIOS) {
    deviceSupportsShake = false;
    shakeInstruction.textContent = "Clique no presente para liberar a mensagem";
  } 
  // Android suporta shake
  else if (isAndroid && window.DeviceMotionEvent) {
    deviceSupportsShake = true;
    shakeInstruction.textContent = "Agite seu celular para abrir o presente!";
  } 
  // Qualquer outro dispositivo (desktop, etc)
  else {
    deviceSupportsShake = false;
    shakeInstruction.textContent = "Clique no presente para liberar a mensagem";
  }
}
      
      // Fun√ß√£o para vibrar o dispositivo (apenas quando o presente abre)
      function vibrateDevice() {
        if ('vibrate' in navigator) {
          try {
            navigator.vibrate(420); // 0.42s de vibra√ß√£o
          } catch (e) {
            console.error('Erro ao vibrar:', e);
          }
        }
      }
      
      // Fun√ß√£o para criar confetes
      function createConfetti() {
        const colors = ['#FFC107', '#FFA000', '#FF8F00', '#FFD54F', '#FFE082'];
        const emojis = ['‚≠ê'];
        
        for (let i = 0; i < 50; i++) {
          setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.className = 'confetti';
            confetti.innerHTML = emojis[Math.floor(Math.random() * emojis.length)];
            confetti.style.left = Math.random() * window.innerWidth + 'px';
            confetti.style.top = '-50px';
            confetti.style.color = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.animationDuration = (2 + Math.random() * 3) + 's';
            confetti.style.animationDelay = (Math.random() * 0.5) + 's';
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
              confetti.remove();
            }, 3000);
          }, i * 50);
        }
      }
      
      // Fun√ß√£o para abrir o presente
      function openPresent() {
        if (isOpened) return;
        
        isOpened = true;
        presentBox.classList.add('open');
        createConfetti();
        
        // Esconder instru√ß√£o de chacoalhar junto com a abertura do presente
        shakeInstruction.style.opacity = '0';
        
        setTimeout(() => {
          presentBox.style.display = 'none';
          fraseContainer.classList.add('show');
          numbersSection.classList.add('show');
          
          // Vibra√ß√£o √∫nica de 0.42s quando a sorte √© revelada
          vibrateDevice();
          
          // Mostrar n√∫meros com atraso
          const numeros = document.querySelectorAll('.numero');
          numeros.forEach((num, index) => {
            setTimeout(() => {
              num.classList.add('numero-visible');
            }, index * 100);
          });
        }, 800);
      }
      
      // Abrir ao clicar no presente
      presentBox.addEventListener('click', function() {
        if (!isOpened) {
          // Anima√ß√£o de shake ao clicar
          presentBox.classList.remove('shake');
          void presentBox.offsetWidth;
          presentBox.classList.add('shake');
          
          // Abrir ap√≥s o shake
          setTimeout(openPresent, 500);
        }
      });
      
      // Abrir ao sacudir o celular (apenas se suportado)
      if (window.DeviceMotionEvent) {
        let lastX = null, lastY = null, lastZ = null;
        let shakeCount = 0;
        let lastShakeTime = 0;
        
        window.addEventListener('devicemotion', function(e) {
          // S√≥ processa shake se o dispositivo suportar
          if (!deviceSupportsShake) return;
          
          const acceleration = e.accelerationIncludingGravity;
          const x = acceleration.x;
          const y = acceleration.y;
          const z = acceleration.z;
          
          if (lastX !== null && lastY !== null && lastZ !== null) {
            const deltaX = Math.abs(x - lastX);
            const deltaY = Math.abs(y - lastY);
            const deltaZ = Math.abs(z - lastZ);
            
            if (deltaX + deltaY + deltaZ > 15) {
              const currentTime = new Date().getTime();
              if (currentTime - lastShakeTime > 500) {
                shakeCount++;
                lastShakeTime = currentTime;
                
                // Anima√ß√£o de shake
                presentBox.classList.remove('shake');
                void presentBox.offsetWidth;
                presentBox.classList.add('shake');
                
                if (shakeCount > 2 && !isOpened) {
                  openPresent();
                }
              }
            }
          }
          
          lastX = x;
          lastY = y;
          lastZ = z;
        });
      }
      
      // Verificar cookie para evitar m√∫ltiplas sortes no mesmo dia
      function checkCookie() {
        const today = new Date().toDateString();
        const lastFortuneDate = getCookie('lastFortuneDate');
        
        if (lastFortuneDate === today) {
          // J√° sorteou hoje, mostrar mensagem
          openPresent();
          presentBox.style.display = 'none';
          shakeInstruction.style.display = 'none';
        }
        
        // Setar cookie com a data de hoje
        setCookie('lastFortuneDate', today, 1);
      }
      
      // Fun√ß√µes auxiliares para cookies
      function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 12 * 60 * 60 * 1000));
        const expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
      }
      
      function getCookie(name) {
        const cookieName = name + "=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookieArray = decodedCookie.split(';');
        for(let i = 0; i < cookieArray.length; i++) {
          let cookie = cookieArray[i];
          while (cookie.charAt(0) === ' ') {
            cookie = cookie.substring(1);
          }
          if (cookie.indexOf(cookieName) === 0) {
            return cookie.substring(cookieName.length, cookie.length);
          }
        }
        return "";
      }
      
      // Verificar cookie quando a p√°gina carrega
      checkCookie();
    });
  </script>
</body>
</html>